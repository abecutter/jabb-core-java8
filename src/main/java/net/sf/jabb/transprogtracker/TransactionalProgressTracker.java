/**
 * 
 */
package net.sf.jabb.transprogtracker;

import java.io.Serializable;
import java.time.Duration;
import java.time.Instant;

/**
 * Tracker of transactional processing progress.
 * For any progress, at any time there is only one transactional processing in progress.
 * <ul>
 * 	<li>ID of the transaction: They can be generated by the service and can also be specified by the client. They are NOT guaranteed to be unique across progresses.</li>
 * </ul>
 * @author James Hu
 *
 */
public interface TransactionalProgressTracker {
	
	/**
	 * Acquire a lease on a progress. At any time only one processor can have the lease of the progress.
	 * @param progressId		ID of the progress
	 * @param processorId	ID of the processor
	 * @param leaseExpirationTimed	the expiration time of the lease
	 * @return	true if a lease successfully acquired, false otherwise.
	 */
	boolean acquireLease(String progressId, String processorId, Instant leaseExpirationTimed);

	/**
	 * Acquire a lease on a progress. At any time only one processor can have the lease of the progress.
	 * @param progressId		ID of the progress
	 * @param processorId	ID of the processor
	 * @param leasePeriod	period of the lease
	 * @return	true if a lease successfully acquired, false otherwise.
	 */
	default boolean acquireLease(String progressId, String processorId, Duration leasePeriod){
		return acquireLease(progressId, processorId, Instant.now().plus(leasePeriod));
	}
	
	/**
	 * Renew the lease already acquired
	 * @param progressId		ID of the progress
	 * @param processorId	ID of the processor
	 * @param leaseExpirationTimed	the new expiration time of the lease
	 */
	void renewLease(String progressId, String processorId, Instant leaseExpirationTimed);
	
	/**
	 * Renew the lease already acquired
	 * @param progressId		ID of the progress
	 * @param processorId	ID of the processor
	 * @param leasePeriod	period of the lease from now
	 */
	default void renewLease(String progressId, String processorId, Duration leasePeriod){
		renewLease(progressId, processorId, Instant.now().plus(leasePeriod));
	}
	
	/**
	 * Release the lease
	 * @param progressId		ID of the progress
	 * @param processorId	ID of the processor
	 */
	void releaseLease(String progressId, String processorId);
	
	/**
	 * Get the ID of the processor that currently holding the lease of the subject
	 * @param progressId		ID of the progress
	 * @return		ID of the processor, or null if the subject is not currently on lease
	 */
	String getProcessor(String subject);
	

	/**
	 * Start a transaction
	 * @param progressId			ID of the progress
	 * @param startPosition		the start position, for example the sequence number in input data stream
	 * @param endPosition		the end position, for example the sequence number in input data stream
	 * @param transaction		details of the transaction, can be null if there is no need for that
	 * @param timeout			The time that the transaction should time out
	 * @param transactionId		The ID of this transaction, can be null if an ID generated by the system should be used
	 * @return		The ID of this transaction
	 */
	String startTransaction(String progressId, String startPosition, String endPosition, Serializable transaction, Instant timeout, String transactionId);
	
	/**
	 * Finish a succeeded transaction
	 * @param progressId			ID of the progress
	 * @param transactionId			ID of the transaction
	 */
	void finishTransaction(String progressId, String transactionId);
	
	/**
	 * Abort a transaction
	 * @param progressId			ID of the progress
	 * @param transactionId			ID of the transaction
	 */
	void abortTransaction(String progressId, String transactionId);
	
	/**
	 * Update the time out of a transaction
	 * @param progressId			ID of the progress
	 * @param transactionId			ID of the transaction
	 * @param timeout				The new time that the transaction should time out
	 */
	void renewTransactionTimeout(String progressId, String transactionId, Instant timeout);
	
	/**
	 * Update the time out of a transaction
	 * @param progressId			ID of the progress
	 * @param transactionId			ID of the transaction
	 * @param timeout				The period from now after which the transaction should time out
	 */
	default void renewTransactionTimeout(String progressId, String transactionId, Duration timeout){
		renewTransactionTimeout(progressId, transactionId, Instant.now().plus(timeout));
	}
	
	/**
	 * Check if a transaction had succeeded.
	 * @param progressId			ID of the progress
	 * @param transactionId			ID of the transaction
	 * @return	true if the transaction had succeeded in the past or does not exist. false if the transaction is in-progress, aborted, or just succeeded a extremely short while ago.
	 */
	boolean hadTransactionSucceeded(String progressId, String transactionId);
	
	/**
	 * Get the last succeeded transaction of a progress
	 * @param progressId	ID of the progress
	 * @return				The last succeeded transaction, or null if there is none.
	 */
	ProgressTransaction getLastSucceededTransaction(String progressId);
	
}
